mailto(kaiv@wakkanet.fi)

htmlcommand(
<insert file=../es-makrot.txt>
<insert name=ecasound_indexbar>

<hr>
<CENTER>
<H4>
<A HREF=index.html>[Index]</A>
<A HREF=examples.html>[Examples]</A>
<A HREF=ecasound_faq.html>[FAQ]</A>
<A HREF=manpages.html>[Man pages]</A>
<A HREF=users_guide/index.html>[User's guide]</A>
<A HREF=programmers_guide/index.html>[Programmer's guide]</A>
<A HREF=kdoc_pages.html>[Source tree]</A>
<A HREF=http://www.wakkanet.fi/~kaiv/ecasound/>[ecasound home page]</A></H4></CENTER>
<CENTER><H4><A HREF=ecasound_manpage.html>[ecasound(1)]</A>
<A HREF=ecatools_manpage.html>[ecatools(1)]</A>
<A HREF=qtecasound_manpage.html>[qtecasound(1)]</A>
<A HREF=ecasound-iam_manpage.html>[ecasound-iam(1)]</A>
<A HREF=ecasoundrc_manpage.html>[ecasoundrc(5)]</A>
</H4>
</CENTER>
<p>
<hr>
<center><h2> ecasound documentation - manual pages </h2></center>
</p>
)

manpage(ecasound-iam)
       (1)
       (17.01.2000)
       ()
       (Multimedia software)


manpagename(ecasound-iam)(ecasound interactive mode)
manpagesynopsis()

manpagedescription()

Ecasound library can be controlled with simple commands. 
This is called the interactive-mode. All programs linked
to ecasound library can use this facility. 

Notice! Hyphens and underlines are both accepted in
	command names (ie. c-add and c_add both work).

manpagesection(GENERAL)
startdit()
dit(quit, q)
Quit ecasound session. What this means in practice depends on the 
client (library throws an exception).

dit(start, t)
Processing is started (play).

dit(stop, s)
Stop processing. 

dit(debug 'debug-level')
Set debug level to 'debug-level'. Notice that client programs can
reimplement the debug routines.
enddit()

dit(help', 'h')
Help!

enddit()

manpagesection(GLOBAL)

startdit()

dit(rewind 'time-in-seconds', rw 'time-in-seconds')
Rewind the current position by 'time-in-seconds' seconds.
 
dit(forward 'time-in-seconds', fw 'ttime-in-seconds')
The current position is forwarded by 'time-in-seconds' seconds.
 
dit(setpos 'time-in-seconds')
Sets the current position to 'time-in-seconds' seconds from the
beginning.
 
dit(status','st','u')
General status info.
 
enddit()

manpagesection(DIRECT ARGUMENTS)
One powerful feature of interactive-mode is that it
understands ecasound's command-line syntax directly. This 
is often the easiest way to add effects and files. For instance,
command "-efb:400,200" means that a bandpass filter is added 
to the currently selected chainsetup-chains combination, with
initial parameters 400 (center frequency) and 200 (width in Hz).

manpagesection(CHAINSETUPS)
Chainsetup is the central data object. All other objects (inputs,
outputs, chains, etc) are connected to some chainsetup. There can be 
many chainsetups but only one can be connected. Similarly only
one chainsetup can be selected. If not otherwise specified operations 
are done on the selected chainsetup. Some operations also require
that selected chainsetup is not connected.

startdit()
dit(cs-add 'name')
Add a new chainsetup with name 'name'. 'name' is now 
the selected chainsetup.

dit(cs-remove) 
Remove currently selected chainsetup.

dit(cs-select 'name')
Select chainsetup 'name'.

dit(cs-index-select 'cs_index')
Select chainsetup based on a short index string. Chainsetup names
can be rather long. This command can be used to avoid typing
these long names. 'cs_index' format is "c<number>". You can get 
a list of all chainsetups (and their indexes) with the 'cs-status'
command. 

dit(cs-load 'filename')
Add a new chainsetup by loading it from file 'filename'. 
'filename' is now the selected chainsetup.

dit(cs-save) 
Save currently selected chainsetup to file. If chainsetup was loaded
from a file, it's saved to the same file. If it doesn't have a default
filename, it's saved to "chainsetup_name.ecs".

dit(cs-save-as 'filename')
Save currently selected chainsetup to file 'filename'.

dit(cs-edit) 
Currently selected chainsetup is saved to a temporary file. This
file is loaded to an external editor (see ecasoundrc(5)). After
editing, the chainsetup is loaded back to ecasound.

dit(cs-connect)
Connect currently selected chainsetup to engine. Only one chainsetup
can be connected at a time.

dit(cs-disconnect)
Disconnect currently connected chainsetup.

dit(cs-length 'seconds')
Set processing time in seconds (doesn't have to be an integer 
value).

dit(cs-loop)
Enable looping. When processing is finished, engine will start 
again from the initial position.

dit(cs-set)
Interpret general chainsetup parameters like for example
"-b" (buffersize), "-m" (mixmode), "-n" (name), etc. 
See ecasound(1) for more info.

dit(cs-format 'bits,channels,sample_rate')
Set the default sample parameters for currently selected chainsetup. 
For example cd-quality audio would be "16,2,44100". This does the
same as command-line argument "-f" (see ecasound(1)).

dit(cs-status, cstatus, cs, a)
Print status info about all chainsetups.
enddit()

manpagesection(CHAINS)
Chain is a simple signal flow abstraction. Every chain has one input
and one output. All chain operators and their controllers are attached
to chains. Chain can be muted, unmuted and it can be bypassed.
If not otherwise stated, all operations are done to currently selected
chainsetup.

startdit()
dit(c-add 'cname1,...,cnameN') 
Add chains. Added chains are automatically selected.

dit(c-select 'cname1,...,cnameN')
Select chains. Other chains are automatically deselected.

dit(c-deselect 'cname1,...,cnameN')
Deselect chains.

dit(c-select-all)
Select all chains.

dit(c-select-add 'cname1,...,cnameN')
Select more chains.

dit(c-remove)
Remove selected chains.

dit(c-clear)
Clear selected chains by removing all chain operators and controllers.
Doesn't change how chains are connected to inputs and outputs.

dit(c-name 'new_name')
Rename selected chains. When using this command, only one chain must
selected.

dit(c-muting)
Toggle chain muting. When chain is muted, all data that goes through is muted.

dit(c-bypass)
Toggle chain bypassing. When chain is bypassed, sample data is passed 
through untouched.

dit(c-forward 'time_in_seconds', c-fw 'time_in_seconds')
Inputs and outputs connected to selected chains are forwarded 
by 'time-in-seconds' seconds. Time should be given as a floating 
point value (eg. 0.001 is the same as 1ms). If audio objecst are
connected to multiple selected chains, they will be forwarded multiple
times.

dit(c-rewind 'time_in_seconds', c-rw 'time_in_seconds')
Inputs and outputs connected to selected chains are rewinded by
'time-in-seconds' seconds. Time should be given as a floating 
point value (eg. 0.001 is the same as 1ms). If audio objecst are
connected to multiple selected chains, they will be forwarded multiple
times.

dit(c-setpos 'time_in_seconds')
Set position of all inputs and outputs connected to selected chains to
'time_in_seconds'.

dit(c-status)
Print status info about all chains.

enddit()

manpagesection(AUDIO INPUT/OUTPUT OBJECTS)
If not otherwise stated, all operations are done to currently selected
chainsetup.

startdit()

dit(aio-add-input 'input_format_string')
Add a new input object. See ecasound(1) man page for more info about 
the argument format ('-i' option).

dit(aio-add-output 'output_format_string')
Add a new output object. See ecasound(1) man page for more info about 
the argument format ('-o' option). 

dit(aio-select 'aobject_name')
Select some audio object. 'aobject_name' is usually a file name, but
not always.

dit(aio-index-select 'aobject_index')
Select some audio object based on short index string. Especially file
names can be rather long. This command can be used to avoid typing
these long names when selecting audio objects. 'aobject_index' format
is "i<number>" for inputs and similarly "o<number>" for outputs. 
You can get a list of all audio objects and their indexes with the
'aio-status' command. 

dit(aio-attach)
Attach currently selected audio object to all selected chains.

dit(aio-remove)
Remove currently selected audio object. 

dit(aio-status)
Audio object status (index strings, position, length, etc).

dit(aio-forward 'time_in_seconds', aio-fw 'time_in_seconds')
Selected audio object is forwarded by 'time-in-seconds' seconds. 
Time should be given as a floating point value (eg. 0.001 is the 
same as 1ms).

dit(aio-rewind 'time_in_seconds', aio-rw 'time_in_seconds')
Selected audio object is rewinded by 'time-in-seconds' seconds. 
Time should be given as a floating point value (eg. 0.001 is the 
same as 1ms).

dit(aio-setpos 'time_in_seconds')
Set audio object position to 'time_in_seconds'.

dit(aio-wave-edit) 
Currently selected audio object is loaded into an external
wave editor (see ecasoundrc(5)).

enddit()

manpagesection(CHAIN OPERATORS)
Chain operators are used to process and analyze sample data.
Controllers are used to control individual chain operator parameters.
Both types of objects are attached to chains. If not otherwise stated,
currently selected chainsetup and chains are used. Also, 'chainop_id' 
and 'param_id' are used to selected chain operators and their
parameters. First valid value for these parameters is 1.

startdit()
dit(cop-add 'cop_format_string')
Add a new chain operator. Argument format is
"-<id_string>:par1,...,parN". See ecasound(1) man page for more 
info.

dit(cop-remove 'chainop_id') 
Remove chain operator.

dit(cop-add-controller 'copc_format_string')
Add a new controller and attach it to currently selected chain 
operator. Argument format is "-<id_string>:<param_id>,<range_low>,
<range_high>,par1,...,parN".  See ecasound(1) man page for more 
info.

dit(cop-set 'chainop_id, param_id, value')
Change the value of a single chain operator parameter. Unlike other
chain operator commands, this can also be used during processing.

dit(cop-remove-controller 'param_id')
Remove the controller that is attached to the currently selected chain
operator.

dit(cop-status) 
Info about chain operator status.

enddit()


manpageseealso()

	ecasound(1), qtecasound (1), ecatools (1), ecasoundrc(5)

manpageauthor()

	Kai Vehmanen, <email(kaiv@wakkanet.fi)>

htmlcommand(<insert name=ecasound_tail>)
