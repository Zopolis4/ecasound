dnl ---
dnl Ecasound configure.in
dnl Many of the tests and macros in this file have been borrowed from 
dnl other packages (Alsaplayer, ALSA, SIP, PyQt, kpackage, etc, etc).
dnl ---

dnl ------------------------------------------------------------------

dnl ---
dnl Process this file with autoconf to produce a configure script.
dnl ---
AC_INIT(libecasound/audiofx.h)

dnl ------------------------------------------------------------------

dnl ---
dnl Init automake
dnl ---
dnl -- >                   !!!!!!!!!
dnl remember to update eca-version.h
AM_INIT_AUTOMAKE(ecasound, 1.9dev6)
dnl <--                    !!!!!!!!!
AM_CONFIG_HEADER(config.h)

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for programs.
dnl ---
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_MAKE_SET
dnl AC_PROG_RANLIB
AC_PROG_INSTALL

dnl ------------------------------------------------------------------

dnl --
dnl Libtool
AC_PATH_PROG(LIBTOOL,libtool,none)
if test x$LIBTOOL = xnone; then
 AC_MSG_ERROR([** Libtool package not installed! **])
fi
AC_PATH_PROG(GNUM4,m4,none)
if test x$GNUM4 = xnone; then
 AC_MSG_ERROR([** GNU m4 not installed! **])
fi
AM_PROG_LIBTOOL

ACLOCAL=aclocal
AUTOMAKE=automake
AUTOCONF=autoconf
AC_SUBST(ACLOCAL)
AC_SUBST(AUTOCONF)
AC_SUBST(AUTOMAKE)

dnl ------------------------------------------------------------------

dnl ---
dnl Sets experimental
dnl ---
AC_ARG_ENABLE(experimental,
[  --enable-experimental	  Enable experimental code (default = no)],
experimental=yes)
if test x$experimental = xyes; then
AC_DEFINE(FEELING_EXPERIMENTAL)
fi
AM_CONDITIONAL(FEELING_EXPERIMENTAL, test x$experimental = xyes)

dnl ------------------------------------------------------------------

dnl ---
dnl Set CXXFLAGS.
dnl ---
CXXFLAGS="-O2 -D_REENTRANT -DNDEBUG -ffast-math -fstrict-aliasing -funroll-loops"
dnl CXXFLAGS="-O2 -D_REENTRANT -fomit-frame-pointer -finline-functions -ffast-math -funroll-loops -Wall -Wstrict-prototypes -pedantic -fstrict-aliasing"

dnl ------------------------------------------------------------------

AC_ARG_ENABLE(debug,
[  --enable-debug		Enable debugging (default = no)],
include_debug=yes)
AM_CONDITIONAL(INCLUDE_DEBUG, test x$include_debug = xyes)
if test x$include_debug = xyes; then
CXXFLAGS="-D_REENTRANT -DENABLE_DBC -g -Wall -Wstrict-prototypes -ffast-math"
dnl LDFLAGS="-pg -pedantic -funroll-loops"
fi                                     

AC_ARG_ENABLE(dbc,
[  --enable-dbc 		  Enable checking dbc-assertions (default = no)],
enable_dbc=yes)
if test x$enable_dbc = xyes; then
CXXFLAGS="$CXXFLAGS -DENABLE_DBC"
fi                                     

dnl ------------------------------------------------------------------

dnl ---
dnl Set up some operating system specific options for POSIX threads
dnl ---
case "$host" in
	*-*-openbsd*)
               CFLAGS="$CFLAGS -pthread"
               CXXFLAGS="$CXXFLAGS -pthread"
               echo "Setting OpenBSD compilation options for POSIX threads"
               ;;
	*-*-freebsd*)
               CFLAGS="$CFLAGS -pthread"
               CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE"
               CXXFLAGS="$CXXFLAGS -pthread"
               echo "Setting FreeBSD compilation options for POSIX threads"
               ;;
	*-*-solaris*)
               CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS -DUSE_SOLARIS"
               echo "Setting Solaris compilation options for POSIX threads"
               ;;
	*)
	       echo "Using generic settings for POSIX thread support."
	       ;;
esac

AC_SEARCH_LIBS(pthread_create, pthread c_r, [],
		AC_MSG_ERROR([** POSIX.4 threads not installed or broken **]))

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for functions.
dnl ---
AC_FUNC_MMAP
AC_CHECK_FUNCS(mlockall)

dnl ---
dnl Checks for libraries.
dnl ---
AC_SEARCH_LIBS(nanosleep, rt)
AC_SEARCH_LIBS(sched_setscheduler, rt)
AC_SEARCH_LIBS(nanosleep, posix4)
AC_SEARCH_LIBS(sched_setscheduler, posix4)
AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(dl, dlopen)


dnl ---
dnl Check for ncurses/termcap
dnl ---
AC_CHECK_LIB(ncurses, main, termcap_library=ncurses,
	AC_CHECK_LIB(termcap, main, termcap_library=termcap,
		AC_MSG_ERROR([** neither termcap nor ncurses library is installed (needed by the console mode user interface) **])))
AC_ARG_ENABLE(ncurses,
[  --disable-ncurses	  	Disable ncurses (default = no)],
termcap_library=none)
AM_CONDITIONAL(USE_NCURSES, test $termcap_library = ncurses)
AM_CONDITIONAL(USE_TERMCAP, test $termcap_library = termcap)
if test x$termcap_library = xtermcap; then
	AC_DEFINE(USE_TERMCAP)
fi
if test x$termcap_library = xncurses; then
	AC_CHECK_HEADER(curses.h,
	 	AC_CHECK_HEADER(term.h,, AC_MSG_ERROR([*** curses headers not installed ***])),
    	  		AC_CHECK_HEADER(ncurses/curses.h, [ 
           			AC_CHECK_HEADER(ncurses/term.h,, AC_MSG_ERROR([*** curses headers not installed ***]))
             			CXXFLAGS="-DHAVE_NCURSES_CURSES_H $CXXFLAGS"
      	     			],
      	   			AC_MSG_ERROR([*** curses headers not installed ***]))
        )
	AC_DEFINE(USE_NCURSES)
fi

dnl ------------------------------------------------------------------

dnl ---
dnl Check for already installed libkvutils
dnl ---
AC_CHECK_LIB(kvutils,main,kvutils_installed=yes,kvutils_installed=no)
AM_CONDITIONAL(KVUTILS_INSTALLED, test x$kvutils_installed = xyes)

dnl ------------------------------------------------------------------

dnl ---
dnl Atomic locking operations in asm/atomic.h
dnl ---
AC_HEADER_ASM_ATOMIC

dnl ---
dnl Audiofile library
dnl ---
AC_CHECK_LIB(audiofile,main,af_support=yes,af_support=no)
AC_ARG_ENABLE(audiofile,
[  --disable-audiofile		  Disable libaudiofile (default = no)],
af_support=no)
AM_CONDITIONAL(COMPILE_AF, test x$af_support = xyes) 
if test x$af_support = xyes; then
AC_DEFINE(COMPILE_AF)
fi                                     

dnl ---
dnl Audio drivers
dnl ---
AC_CHECK_LIB(asound,main,alsa_support=yes,alsa_support=no)
AC_ARG_ENABLE(alsa,
[  --disable-alsa		  Disable ALSA (default = no)],
alsa_support=no)
AM_CONDITIONAL(COMPILE_ALSA, test x$alsa_support = xyes)
if test x$alsa_support = xyes; then
AC_CHECK_LIB(asound,snd_pcm_plug_open,AC_DEFINE(ALSALIB_060),
	AC_CHECK_LIB(asound,snd_pcm_channel_params,AC_DEFINE(ALSALIB_050),
		AC_CHECK_LIB(asound,snd_pcm_capture_params,AC_DEFINE(ALSALIB_032),
			AC_CHECK_LIB(asound,snd_pcm_record_params,
				AC_MSG_ERROR([ALSA <0.3.2 not supported - update to a newer version or compile with --disable-alsa])))))
fi

dnl ---
dnl ALSA raw-midi support
dnl ---
AC_MSG_CHECKING(whether to include direct support for ALSA rawmidi interface)
AC_ARG_ENABLE(alsa_rawmidi,
  [  --enable-alsa-rawmidi		enable ALSA raw midi support (default=no)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
        alsa_rawmidi_support=yes 
      ;;

      n | no)
        AC_MSG_RESULT(no)
        alsa_rawmidi_support=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --enable-alsa-rawmidi: $enableval])
      ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
	alsa_rawmidi_support=no
  ]
)

AM_CONDITIONAL(COMPILE_ALSA_RAWMIDI, test x$alsa_rawmidi_support = xyes)
if test x$alsa_rawmidi_support = xyes; then
	AC_CHECK_LIB(asound, snd_rawmidi_open)
	AC_DEFINE(COMPILE_ALSA_RAWMIDI)
fi

dnl AM_PATH_ESD(0.2.4,esd_support=yes,esd_support=no)
dnl AC_ARG_ENABLE(esd,
dnl [  --disable-esd		  Disable ESD (default = no)],
dnl esd_support=no)
dnl AM_CONDITIONAL(COMPILE_ESD, test x$esd_support = xyes) 
dnl if test x$esd_support = xyes; then
dnl AC_DEFINE(COMPILE_ESD)
dnl fi                                     

AC_CHECK_HEADER(sys/soundcard.h,oss_support=yes,oss_support=no)
AC_ARG_ENABLE(oss,
[  --disable-oss		  Disable OSS (default = no)],
oss_support=no)
AM_CONDITIONAL(COMPILE_OSS, test x$oss_support = xyes) 
if test x$oss_support = xyes; then
AC_DEFINE(COMPILE_OSS)
fi                                     

dnl ---
dnl Disabling OSS trigger functions
dnl ---
AC_ARG_ENABLE(osstrigger,
[  --disable-osstrigger 	  Disable the use of OSS trigger functions (default = no)],
osstrigger=yes)
if test x$osstrigger = xyes; then
AC_DEFINE(DISABLE_OSS_TRIGGER)
fi

dnl --
dnl aRts support
dnl --
AC_CHECK_LIB(artsc,main,arts_support=yes,arts_support=no)
AC_ARG_ENABLE(arts,
[  --disable-audiofile		  Disable libaudiofile (default = no)],
arts_support=no)
AM_CONDITIONAL(COMPILE_ARTS, test x$arts_support = xyes) 
if test x$arts_support = xyes; then
AC_DEFINE(COMPILE_ARTS)
fi                                     

dnl ------------------------------------------------------------------

dnl --
dnl readline library
dnl --
AC_MSG_CHECKING(whether to build with system readline)
AC_ARG_ENABLE(sys_readline,
  [  --enable-sys-readline		compile with system readline (default=no)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
        enable_sysreadline=yes 
      ;;

      n | no)
        AC_MSG_RESULT(no)
        enable_sysreadline=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --enable-sys-readline: $enableval])
      ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
    enable_sysreadline=no
  ]
)

dnl
dnl Check for readline.h or readline/readline.h (same with history.h)
dnl and for readline and history libraries
dnl
AM_CONDITIONAL(SYSTEM_READLINE, test x$enable_sysreadline = xyes)
if test x$enable_sysreadline = xyes; then
  AC_CHECK_HEADER(readline.h, readline_includes=/usr/include, 
    AC_CHECK_HEADER(readline/readline.h,
      readline_includes=/usr/include/readline,
      AC_MSG_ERROR([*** readline headers not installed ***]))
  )
  AC_CHECK_HEADER(history.h,,
    AC_CHECK_HEADER(readline/history.h,,
      AC_MSG_ERROR([*** readline history headers not installed ***]))
  )
  AC_CHECK_LIB(readline, main,, AC_MSG_ERROR([*** readline support not installed ***]))
  AC_CHECK_LIB(history, main,, AC_MSG_ERROR([*** readline history support not installed ***]))
  AC_SUBST(readline_includes)
else
  AC_CONFIG_SUBDIRS(readline-4.0)
fi

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for header files.
dnl ---
dnl AC_HEADER_STDC
AC_HEADER_STDC
dnl --- AC_CHECK_HEADER(stl.h,, 
dnl ---	AC_MSG_WARN([** C++/STL header files not found! ***]))
AC_LANG_CPLUSPLUS
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h dlfcn.h sys/ioctl.h sys/time.h sys/resource.h sys/stat.h sys/wait.h signal.h sys/types.h sys/mman.h errno.h sched.h unistd.h inttypes.h asm/atomic.h)
AC_CHECK_HEADER(map.h,nostlmap=0,nostlmap=1)
if test "x$nostlmap" = "x1" ; then
	AC_MSG_ERROR([C++ header files not found! Searched for 'map.h' (STL).])
fi

dnl ------------------------------------------------------------------

compile_pyecasound=yes

dnl ---
dnl Python header files
dnl ---
eca_python_incdir=
AC_MSG_CHECKING([for Python include files])

AC_ARG_WITH(python-includes, [  --with-python-includes=DIR  Python include files are in DIR])
if test ! "X$with_python_includes" = "X"
then
	python_incdirs=$with_python_includes
else
	python_incdirs="/usr/local/include/python2.0 /usr/include/python2.0 /usr/local/include/python1.6 /usr/include/python1.6 /usr/local/include/python1.5 /usr/include/python1.5 /usr/local/include /usr/include"
fi

for d in $python_incdirs
do
	if test -r $d/Python.h
	then
		eca_python_incdir=$d
		break
	fi
done

AC_SUBST(eca_python_incdir)
if test "X$eca_python_incdir" = "X"
then
	AC_MSG_WARN([Python.h not found])
	compile_pyecasound=no
else
	AC_MSG_RESULT($eca_python_incdir)
	compile_pyecasound=yes
fi

dnl ---
dnl Python modules
dnl ---
AC_ARG_WITH(python-modules,
	[  --with-python-modules=DIR install Python modules in DIR])

if test "X$with_python_modules" = "X"
then
	pymoddirs="/usr/local/lib/python2.0 /usr/lib/python2.0 /usr/local/lib/python1.6 /usr/lib/python1.6 /usr/local/lib/python1.5 /usr/lib/python1.5 /usr/local/lib /usr/lib"
else
	pymoddirs=$with_python_modules
fi

dnl ---
dnl a hack to support broken debian python installs
dnl ---
AC_ARG_ENABLE(python-force-site-packages,
       [  --enable-python-force-site-packages force install Python modules into
site-packages even when it doesn't exist [default=no] ],
python_force_site_packages=yes)
            
AC_FIND_FILE(lib-dynload,$pymoddirs,eca_python_modules)
dnl Use site-packages in preference if it is there.
if test -d $eca_python_modules/site-packages -o "X$python_force_site_packages" = "Xyes"
then
	eca_python_modules=$eca_python_modules/site-packages
	eca_python_dlmodules=$eca_python_modules
else
	eca_python_dlmodules=$eca_python_modules/lib-dynload
fi
AC_SUBST(eca_python_modules)
AC_SUBST(eca_python_dlmodules)

AC_ARG_ENABLE(pyecasound,
[  --disable-pyecasound 	  Disable compilation of pyecasound (default = no)],
[  compile_pyecasound=no ])

dnl if test x$disable_pyecasound = xyes ; then compile_pyecasound=no ; fi
AM_CONDITIONAL(COMPILE_PYECASOUND, test x$compile_pyecasound = xyes)

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ---
dnl AC_C_CONST
AC_C_BIGENDIAN
AC_TYPE_SIZE_T

dnl ------------------------------------------------------------------

dnl ---
dnl Create outputs 
dnl ---
AC_OUTPUT([
Makefile
ecasound.spec
libecasound/Makefile
libecasound/ecasound-config
libecasound/plugin-paths.h
libecasound/plugins/Makefile
libecasoundc/Makefile
libecasoundc/ecasoundc-config
pyecasound/Makefile
ecasound/Makefile
ecatools/Makefile
kvutils/Makefile
Documentation/Makefile
Documentation/users_guide/Makefile
Documentation/programmers_guide/Makefile
examples/Makefile
contrib/Makefile
])

# And a short summary 
echo "-----------------------------------------------------------------"
echo "Following packages are now configured:"
echo "ecasound: 		yes (ecasound,libecasound,libecasoundc)"
echo "ecatools: 		yes"
if test x$compile_pyecasound = xyes ; then
	echo "pyecasound: 		yes"
else
	echo "pyecasound: 		no"
fi
echo "libkvutils: 		yes"
echo "-----------------------------------------------------------------"
echo "Following features were selected:"
if test x$include_debug = xyes ; then
	echo "Debugging info:		yes"
else
	echo "Debugging info:		no"	
fi
if test x$termcap_library = xtermcap ; then
	echo "Termcap:		termcap"
fi
if test x$termcap_library = xncurses; then
	echo "Termcap:		ncurses"
fi
if test x$termcap_library = xnone; then
	echo "Termcap:		none"
fi

if test x$af_support = xyes ; then
	echo "Libaudiofile:		yes"
else
	echo "Libaudiofile:		no"
fi

if test x$alsa_support = xyes ; then
	echo "ALSA support		yes"
else
	echo "ALSA support		no"
fi

if test x$alsa_rawmidi_support = xyes ; then
	echo "ALSA rawmidi support	yes"
else
	echo "ALSA rawmidi support	no"
fi

if test x$oss_support = xyes ; then
	echo "OSS support		yes"
else
	echo "OSS support		no"
fi
if test x$arts_support = xyes ; then
	echo "aRts support		yes"
else
	echo "aRts support		no"
fi
if test x$enable_sysreadline = xyes ; then
	echo "Use system readline	yes"
else
	echo "Use system readline	no"
fi

echo "-----------------------------------------------------------------"
echo "Following directories are used:"
echo "Directory prefix:		"$prefix
if test x$compile_pyecasound = xyes ; then
	echo "Python include dir:		"$eca_python_incdir
	echo "Python module dir:		"$eca_python_modules
fi
if test x$enable_sysreadline = xyes ; then
  	echo "readline includes:		"$readline_includes
fi  

echo "-----------------------------------------------------------------"
echo "Type 'make' to compile the package and 'make install' to install."
echo "-----------------------------------------------------------------"
