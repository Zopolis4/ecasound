dnl ---
dnl configure.in for ecasound
dnl last modified: 20030109-7
dnl 
dnl Many of the tests and macros in this file have been borrowed from 
dnl other GPL-lisenced packages (Alsaplayer, ALSA, SIP, PyQt, 
dnl kpackage, etc, etc).
dnl ---

dnl ------------------------------------------------------------------

dnl ---
dnl Initialize autoconf
dnl ---
AC_INIT(libecasound/audiofx.h)

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "1. Section: Basic setup"
echo "------------------------------------------------------------------"

dnl ---
dnl Init automake
dnl ---
AM_INIT_AUTOMAKE(ecasound, 2.2.1)
AM_CONFIG_HEADER(config.h)

dnl ---
dnl Set library interface version numbers
dnl
dnl defines: LIBECASOUND_VERSION, LIBECASOUNDC_VERSION, LIBKVUTILS_VERSION
dnl ---

dnl # when creating a new library interface version:
dnl #   1. edit the below version numbers
dnl #   2. replace instances of libpackageX with libpackageY 
dnl #      in package/Makefile.am
dnl #   3. "find . -type f |xargs gre libpackageX"

LIBECASOUND_VERSION=9
LIBECASOUNDC_VERSION=1
LIBKVUTILS_VERSION=4

AC_SUBST(LIBECASOUND_VERSION)
AC_SUBST(LIBECASOUNDC_VERSION)
AC_SUBST(LIBKVUTILS_VERSION)

AC_DEFINE_UNQUOTED(LIBECASOUND_VERSION, ${LIBECASOUND_VERSION})
AC_DEFINE_UNQUOTED(LIBECASOUNDC_VERSION, ${LIBECASOUNDC_VERSION})
AC_DEFINE_UNQUOTED(LIBKVUTILS_VERSION, ${LIBKVUTILS_VERSION})

dnl ------------------------------------------------------------------

dnl --
dnl Initialize default flags
dnl --
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_LANG_CPLUSPLUS
AC_CANONICAL_HOST

dnl ---
dnl Set compiler flags
dnl
dnl modifies: CXXFLAGS, CFLAGS
dnl ---
EXTRAFLAGS="-D_REENTRANT"
EXTRAGCCFLAGS="$EXTRAFLAGS -ffast-math -fstrict-aliasing -funroll-loops"
if test x${GXX} = xyes; then
   CXXFLAGS="$CXXFLAGS $EXTRAFLAGS $EXTRAGCCFLAGS"
fi
if test x${GCC} = xyes; then
   CFLAGS="$CFLAGS $EXTRAFLAGS $EXTRAGCCFLAGS"
fi

dnl ------------------------------------------------------------------

dnl ---
dnl Sets up some operating system specific options
dnl
dnl modifies: CXXFLAGS, CFLAGS, CPPFLAGS, LIBS
dnl ---

case "$host" in
	*-*-openbsd*)
               CFLAGS="$CFLAGS -pthread"
               CXXFLAGS="$CXXFLAGS -pthread"
               echo "Setting OpenBSD compilation options for POSIX threads"
               ;;
	*-*-freebsd*)
               CFLAGS="$CFLAGS -pthread"
               CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE"
               CXXFLAGS="$CXXFLAGS -pthread"
               echo "Setting FreeBSD compilation options for POSIX threads"
               ;;
	*-*-solaris*)
               CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS -DUSE_SOLARIS"
	       LIBS="$LIBS -lposix4 -lpthread"
	       echo "Setting Solaris compilation options for POSIX threads"
	       if test x$CXX = xCC; then
	          LIBS="$LIBS -mt"
		  CXXFLAGS="$CXXFLAGS -instances=static"
		  echo "Sun Workshop C++ compiler detected. Enabling static template instantation."
	       fi
               ;;
	alpha*-*-linux-*)
	       CFLAGS="$CFLAGS -mieee"
	       CXXFLAGS="$CXXFLAGS -mieee"
	       echo "Enabling fully IEEE compliant floating-point code generation on Alpha."
	       ;;
	*)
	       echo "Using generic settings for POSIX thread support."
	       ;;
esac

dnl ------------------------------------------------------------------

dnl ---
dnl Check pthread support
dnl ---

dnl switch to C while testing for pthread support
AC_LANG_C
AC_SEARCH_LIBS(pthread_create, pthread c_r,,
		AC_MSG_ERROR([** POSIX.4 threads not installed or broken **]))
dnl switch back to C++
AC_LANG_CPLUSPLUS

echo "------------------------------------------------------------------"
echo "2. Section: Options for the configure script"
echo "------------------------------------------------------------------"

dnl ------------------------------------------------------------------

dnl ---
dnl Check whether to enable debugging
dnl
dnl defines: ECA_AM_DEBUG_MODE
dnl modifies: CXXFLAGS, CFLAGS
dnl ---

AC_MSG_CHECKING(whether to enable debugging)
AC_ARG_ENABLE(debug,
[  --enable-debug		Enable debugging (default = no)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
	include_debug=yes
      ;;

      n | no)
        AC_MSG_RESULT(no)
	include_debug=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --enable-debug: $enableval])
      ;;
    esac
 ]

)
AM_CONDITIONAL(ECA_AM_DEBUG_MODE, test x$include_debug = xyes)
if test x$include_debug = xyes; then
    EXTRADEBUGFLAGS="-Wall -Wstrict-prototypes -O"
else
    EXTRADEBUGFLAGS="-DNDEBUG"
fi                                     
CXXFLAGS="$CXXFLAGS $EXTRADEBUGFLAGS"
CFLAGS="$CFLAGS $EXTRADEBUGFLAGS"

dnl ------------------------------------------------------------------

dnl ---
dnl Check for experimental mode
dnl
dnl defines: ECA_FEELING_EXPERIMENTAL, ECA_AM_FEELING_EXPERIMENTAL
dnl ---
AC_ARG_ENABLE(experimental,
	      [  --enable-experimental	  Enable experimental code (default = no)],
	      experimental=yes)
if test x$experimental = xyes; then
    AC_DEFINE(ECA_FEELING_EXPERIMENTAL)
fi
AM_CONDITIONAL(ECA_AM_FEELING_EXPERIMENTAL, test x$experimental = xyes)

dnl ------------------------------------------------------------------

dnl ---
dnl Sets the ecasound prefix variable
dnl
dnl defines: ECA_PREFIX, ECA_S_PREFIX
dnl ---

dnl Define ecaprefix depending on wether our user gives us one or not
if test "x${prefix}" = "xNONE"; then
    ecaprefix=${ac_default_prefix}
else
    ecaprefix=${prefix}
fi
ECA_S_PREFIX=${ecaprefix}

AC_SUBST(ECA_S_PREFIX)
AC_DEFINE_UNQUOTED(ECA_PREFIX, "${ecaprefix}")

dnl ------------------------------------------------------------------

dnl ---
dnl Check whether to enable design-by-contract assertations
dnl
dnl modifies: CXXFLAGS, CFLAGS
dnl ---

AC_MSG_CHECKING(whether to check design-by-contract assertions)
enable_dbc_d=yes
AC_ARG_ENABLE(dbc,
[  --disable-dbc 		  Don't check design-by-contract assertions (default = check)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
	enable_dbc_d=yes
      ;;

      n | no)
        AC_MSG_RESULT(no)
	enable_dbc_d=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --disable-dbc: $enableval])
      ;;
    esac
 ],[
    AC_MSG_RESULT(yes)
 ]
)
if test x$enable_dbc_d = xyes; then
CXXFLAGS="$CXXFLAGS -DENABLE_DBC"
CFLAGS="$CFLAGS -DENABLE_DBC"
fi                                     

dnl ------------------------------------------------------------------

dnl ---
dnl Check for LFS (--with-largefile)
dnl
dnl modifies: CXXFLAGS, CFLAGS
dnl ---
AC_CHECK_LARGEFILE

dnl ------------------------------------------------------------------


dnl ------------------------------------------------------------------

dnl ---
dnl Check for OSS driver support
dnl
dnl defines: ECA_COMPILE_OSS, ECA_AM_COMPILE_OSS
dnl ---

AC_CHECK_HEADER(sys/soundcard.h,oss_support=yes,oss_support=no)
AC_ARG_ENABLE(oss,
              [  --disable-oss		  Disable OSS (default = no)],
	      oss_support=no)
AM_CONDITIONAL(ECA_AM_COMPILE_OSS, test x$oss_support = xyes)
if test x$oss_support = xyes; then
    AC_DEFINE(ECA_COMPILE_OSS)
fi                                     

dnl ---
dnl Disabling OSS trigger functions
dnl
dnl defines: ECA_DISABLE_OSS_TRIGGER
dnl ---
AC_ARG_ENABLE(osstrigger,
	      [  --disable-osstrigger 	  Disable the use of OSS trigger functions (default = no)],
	      osstrigger=yes)
if test x$osstrigger = xyes; then
    AC_DEFINE(ECA_DISABLE_OSS_TRIGGER)
fi

dnl ------------------------------------------------------------------

dnl --
dnl Check for aRts support
dnl
dnl defines: ECA_AM_COMPILE_ARTS, ECA_S_ARTSC_CFLAGS, 
dnl          ECA_S_ARTSC_LIBS, ECA_COMPILE_ARTS
dnl --
AC_PATH_PROG(ARTSC_CONFIG,artsc-config,none)
if test x$ARTSC_CONFIG = xnone; then
  arts_support=no
else
  arts_support=yes
fi

AC_ARG_ENABLE(arts,
	      [  --disable-arts		  Disable aRts support (default = no)],
	      arts_support=no)
	      AM_CONDITIONAL(ECA_AM_COMPILE_ARTS, test x$arts_support = xyes) 

if test x$arts_support = xyes; then
    AC_DEFINE(ECA_COMPILE_ARTS)
fi                                     

ECA_S_ARTSC_CFLAGS="`$ARTSC_CONFIG --cflags`"
ECA_S_ARTSC_LIBS="`$ARTSC_CONFIG --libs`"

AC_SUBST(ECA_S_ARTSC_CFLAGS)
AC_SUBST(ECA_S_ARTSC_LIBS)

dnl ------------------------------------------------------------------

dnl --
dnl Check for JACK support
dnl
dnl defines: ECA_AM_COMPILE_JACK, ECA_S_JACK_LIBS, ECA_S_JACK_INCLUDES,
dnl          ECA_COMPILE_JACK
dnl --
AC_CHECK_HEADER(jack/jack.h,jack_support=yes,jack_support=no)
AC_ARG_WITH(jack,
	    [  --with-jack=DIR	Compile against JACK installed in DIR],
	    [
	        ECA_S_JACK_LIBS=$withval/lib
		ECA_S_JACK_INCLUDES=$withval/include
		jack_support=yes
	    ])
AC_ARG_ENABLE(jack,
	      [  --disable-jack		  Disable JACK support (default = no)],
	      jack_support=no)
AM_CONDITIONAL(ECA_AM_COMPILE_JACK, test x$jack_support = xyes)

if test x$jack_support = xyes; then
    AC_DEFINE(ECA_COMPILE_JACK)
fi                                     

AC_SUBST(ECA_S_JACK_LIBS)
AC_SUBST(ECA_S_JACK_INCLUDES)

dnl ------------------------------------------------------------------

dnl --
dnl Checks for pyecasound
dnl
dnl defines: ECA_S_PYTHON_INCLUDES, ECA_S_PYTHON_DLMODULES, 
dnl          ECA_AM_COMPILE_PYECASOUND
dnl --

compile_pyecasound=yes

dnl --
dnl Python header files

ECA_S_PYTHON_INCLUDES=
AC_MSG_CHECKING([for Python include files])

AC_ARG_WITH(python-includes, [  --with-python-includes=DIR  Python include files are in DIR])
if test ! "X$with_python_includes" = "X"
then
	python_incdirs=$with_python_includes
else
	python_incdirs="/usr/local/include /usr/include"
	dnl -- Double-brackets to espace the real brackets
	python_incdirsmore=`python -c "import sys; print (sys.prefix + '/include/python' + sys.version[[:3]])"`
	python_incdirs="$python_incdirs $python_incdirsmore"
fi

for d in $python_incdirs
do
	if test -r $d/Python.h
	then
		ECA_S_PYTHON_INCLUDES=$d
		break
	fi
done

AC_SUBST(ECA_S_PYTHON_INCLUDES)
if test "X$ECA_S_PYTHON_INCLUDES" = "X"
then
	AC_MSG_WARN([Python.h not found])
	compile_pyecasound=no
else
	AC_MSG_RESULT($eca_python_incdir)
	compile_pyecasound=yes
fi

dnl --
dnl Python modules

AC_MSG_CHECKING([for Python libraries])
AC_ARG_WITH(python-modules,
	    [  --with-python-modules=DIR install Python modules in DIR])

if test "X$with_python_modules" = "X"
then
    pymoddirs="/usr/local/lib /usr/lib"
    dnl -- Double-brackets to espace the real brackets
    pymoddirsmore=`python -c "import sys; print (sys.prefix + '/lib/python' + sys.version[[:3]])"`
    pymoddirs="$pymoddirs $pymoddirsmore"
else
    pymoddirs=$with_python_modules
fi
AC_MSG_RESULT($pymoddirs)

dnl ---
dnl a hack to support broken debian python installs

AC_ARG_ENABLE(python-force-site-packages,
       [  --enable-python-force-site-packages force install Python modules into
site-packages even when it doesn't exist [default=no] ],
python_force_site_packages=yes)
            
AC_FIND_FILE(lib-dynload,$pymoddirs,ECA_S_PYTHON_MODULES)
dnl Use site-packages in preference if it is there.
if test -d $ECA_S_PYTHON_MODULES/site-packages -o "X$python_force_site_packages" = "Xyes"
then
    ECA_S_PYTHON_MODULES=$ECA_S_PYTHON_MODULES/site-packages
    ECA_S_PYTHON_DLMODULES=$ECA_S_PYTHON_MODULES
else
    ECA_S_PYTHON_DLMODULES=$ECA_S_PYTHON_MODULES/lib-dynload
fi
AC_SUBST(ECA_S_PYTHON_MODULES)
AC_SUBST(ECA_S_PYTHON_DLMODULES)

AC_ARG_ENABLE(pyecasound,
[  --disable-pyecasound 	  Disable compilation of pyecasound (default = no)],
[  compile_pyecasound=no ])

dnl if test x$disable_pyecasound = xyes ; then compile_pyecasound=no ; fi
AM_CONDITIONAL(ECA_AM_COMPILE_PYECASOUND, test x$compile_pyecasound = xyes)

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "3. Section: Programs "
echo "------------------------------------------------------------------"

dnl ------------------------------------------------------------------

AC_CHECK_CXX_NAMESPACE_SUPPORT

dnl ------------------------------------------------------------------

dnl --
dnl Autotools and libtool
dnl --
AC_LANG_C
AC_PROG_LIBTOOL
AC_LANG_CPLUSPLUS

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "4. Section: Libraries"
echo "------------------------------------------------------------------"

dnl ---
dnl Check system libraries
dnl ---

dnl switch to C for testing
AC_LANG_C
dnl see also section 7 - functions 
AC_SEARCH_LIBS(inet_ntoa, socket nsl)
AC_SEARCH_LIBS(nanosleep, rt posix4)
AC_SEARCH_LIBS(sched_setscheduler, rt posix4)
AC_SEARCH_LIBS(socket, socket nsl)
AC_SEARCH_LIBS(sin, m,, AC_MSG_ERROR([*** required sin() function not found! ***]))
AC_SEARCH_LIBS(dlopen, dl,, AC_MSG_ERROR([*** required dlopen() function not found! ***]))
dnl switch back to C++
AC_LANG_CPLUSPLUS

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for ncurses/termcap
dnl
dnl defines: ECA_AM_USE_NCURSES, ECA_AM_USE_TERMCAP, ECA_USE_NCURSES_H,
dnl          ECA_USE_CURSES_H, ECA_HAVE_NCURSES_CURSES_H
dnl ---

dnl switch to C for testing
AC_LANG_C

AC_CHECK_LIB(ncurses, main, termcap_library=ncurses,
	AC_CHECK_LIB(termcap, main, termcap_library=termcap,
		termcap_library=none))
AC_ARG_ENABLE(ncurses,
	[  --disable-ncurses	  	Disable ncurses (default = no)],
	termcap_library=none)
AM_CONDITIONAL(ECA_AM_USE_NCURSES, test $termcap_library = ncurses)
AM_CONDITIONAL(ECA_AM_USE_TERMCAP, test $termcap_library = termcap)
if test x$termcap_library = xtermcap; then
    AC_CHECK_HEADER(curses.h,
        AC_DEFINE(ECA_USE_CURSES_H),
	AC_MSG_ERROR([*** curses.h not found! Try with "./configure --disable-ncurses". ***]))
fi
if test x$termcap_library = xncurses; then
    AC_CHECK_HEADER(ncurses/ncurses.h,
        AC_DEFINE(ECA_USE_NCURSES_NCURSES_H),
        [
	    AC_CHECK_HEADER(ncurses.h,
		AC_DEFINE(ECA_USE_NCURSES_H),
		AC_MSG_ERROR([*** Neither ncurses.h or ncurses/ncurses.h found! Try with "./configure --disable-ncurses". ***]))
	])
fi

dnl switch back to C++
AC_LANG_CPLUSPLUS

dnl ------------------------------------------------------------------

dnl ---
dnl Audiofile library
dnl 
dnl defines: ECA_AM_COMPILE_AUDIOFILE, ECA_COMPILE_AUDIOFILE
dnl ---
AC_CHECK_LIB(audiofile,main,af_support=yes,af_support=no)
AC_ARG_ENABLE(audiofile,
  [  --disable-audiofile		  Disable libaudiofile (default = no)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
	af_support=yes
      ;;

      n | no)
        AC_MSG_RESULT(no)
	af_support=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --disable-audiofile: $enableval])
      ;;
    esac
 ]
)
AM_CONDITIONAL(ECA_AM_COMPILE_AUDIOFILE, test x$af_support = xyes) 

if test x$af_support = xyes; then
    AC_DEFINE(ECA_COMPILE_AUDIOFILE)
fi                                     

dnl ------------------------------------------------------------------

dnl ---
dnl Check for ALSA driver support
dnl
dnl defines: ECA_AM_COMPILE_ALSA
dnl ---

AC_ARG_ENABLE(alsa,
              [  --disable-alsa		  Disable ALSA (default = no)],
              alsa_support=no)
if test x$alsa_support = x; then
    AC_CHECK_LIB(asound, snd_pcm_delay,
		 alsa_support=yes,
	         alsa_support=no AC_CHECK_LIB(asound, main, AC_MSG_ERROR([ALSA version older than 0.9.0 not supported - update to a newer version or compile with --disable-alsa])))
fi

AM_CONDITIONAL(ECA_AM_COMPILE_ALSA, test x$alsa_support = xyes)

if test x$alsa_support = xyes; then
    AC_DEFINE(ECA_COMPILE_ALSA)
fi    

dnl ------------------------------------------------------------------

dnl ------------------------------------------------------------------

dnl ---
dnl Check for already installed libkvutils
dnl
dnl defines: ECA_AM_KVUTILS_INSTALLED
dnl ---
AC_CHECK_LIB(kvutils,main,kvutils_installed=yes,kvutils_installed=no)
AM_CONDITIONAL(ECA_AM_KVUTILS_INSTALLED, test x$kvutils_installed = xyes)

dnl ------------------------------------------------------------------

dnl --
dnl Check whether to use an already installed readline library
dnl
dnl defines: ECA_AM_SYSTEM_READLINE, ECA_S_READLINE_INCLUDES
dnl --

AC_MSG_CHECKING(whether to build with system readline)
AC_ARG_ENABLE(sys_readline,
  [  --enable-sys-readline		compile with system readline (default=no)],
  [
    case "$enableval" in
      y | yes)
        AC_MSG_RESULT(yes)
        enable_sysreadline=yes 
      ;;

      n | no)
        AC_MSG_RESULT(no)
        enable_sysreadline=no
      ;;
        
      *)
        AC_MSG_ERROR([Invalid parameter value for --enable-sys-readline: $enableval])
      ;;
    esac
  ],
  [
    AC_MSG_RESULT(no)
    enable_sysreadline=no
  ]
)

dnl Check for readline.h or readline/readline.h (same with history.h)
dnl and for readline and history libraries

AM_CONDITIONAL(ECA_AM_SYSTEM_READLINE, test x$enable_sysreadline = xyes)
if test x$enable_sysreadline = xyes; then
  AC_CHECK_HEADER(readline.h, ECA_S_READLINE_INCLUDES=/usr/include, 
    [AC_CHECK_HEADER(readline/readline.h,
		     ECA_S_READLINE_INCLUDES=/usr/include/readline,
       [AC_MSG_ERROR([*** readline headers not installed ***])])])
  AC_CHECK_HEADER(history.h,,
     [AC_CHECK_HEADER(readline/history.h,,
       AC_MSG_ERROR([*** readline history headers not installed ***]))])

  AC_CHECK_LIB(readline, main,, AC_MSG_ERROR([*** readline support not installed ***]))
  AC_CHECK_LIB(history, main,, AC_MSG_ERROR([*** readline history support not installed ***]))
  AC_SUBST(ECA_S_READLINE_INCLUDES)
else
  AC_CONFIG_SUBDIRS(readline-4.0)
fi

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "5. Section: Headers"
echo "------------------------------------------------------------------"

dnl ------------------------------------------------------------------

dnl ---
dnl Checks for system header files.
dnl ---
AC_HEADER_TIME
dnl Note! Header filenames must be on the same line!
AC_CHECK_HEADERS(dlfcn.h errno.h fcntl.h signal.h unistd.h sys/stat.h sys/time.h sys/types.h sys/wait.h,,
		 AC_MSG_ERROR([*** not all required header files were found ***]))
AC_CHECK_HEADERS(inttypes.h ladspa.h sched.h stdint.h sys/mman.h)

dnl ------------------------------------------------------------------

dnl ---
dnl C++ specific checks
dnl ---
dnl AC_HEADER_STDC
AC_HEADER_STDC
dnl --- AC_CHECK_HEADER(stl.h,, 
dnl ---	AC_MSG_WARN([** C++/STL header files not found! ***]))
AC_LANG_CPLUSPLUS
AC_CHECK_HEADER(map,nostlmap=0,nostlmap=1)
if test "x$nostlmap" = "x1" ; then
	AC_MSG_ERROR([C++ header files not found! Searched for '<map>' (STL).])
fi

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "6. Section: Typedefs and structures"
echo "------------------------------------------------------------------"

dnl ---
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ---

AC_LANG_C
dnl AC_C_CONST
AC_C_BIGENDIAN
AC_TYPE_SIZE_T
AC_LANG_CPLUSPLUS

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "7. Section: Functions"
echo "------------------------------------------------------------------"

dnl ---
dnl Checks for functions.
dnl ---
AC_FUNC_MMAP
AC_CHECK_FUNCS(atoll)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(mlockall)
AC_CHECK_FUNCS(munlockall)
AC_CHECK_FUNCS(nanosleep)
AC_CHECK_FUNCS(usleep)
AC_CHECK_FUNCS(sched_get_priority_max)
AC_CHECK_FUNCS(sched_getparam)
AC_CHECK_FUNCS(sched_getscheduler)
AC_CHECK_FUNCS(sched_setscheduler)

dnl ------------------------------------------------------------------

dnl ---
dnl Check whether to disable all use of shared libs
dnl 
dnl Note! Must be run after all other autoconf tests as 
dnl       'ld' doesn't understand -all-static. 
dnl
dnl defines: ECA_STATIC_ONLY, ECA_AM_STATIC_ONLY
dnl modifies: CXXFLAGS, CFLAGS, LDFLAGS
dnl ---
AC_ARG_ENABLE(all-static,
[  --enable-all-static	  Build only static binaries (default = no)],
enable_all_static=yes)
if test x$enable_all_static = xyes; then
    AC_DEFINE(ECA_ALL_STATIC)
    CXXFLAGS="$CXXFLAGS -static"
    CFLAGS="$CFLAGS -static"
    LDFLAGS="$LDFLAGS -Bstatic -all-static"
fi
AM_CONDITIONAL(ECA_AM_ALL_STATIC, test x$enable_all_static = xyes)

dnl ------------------------------------------------------------------

echo "------------------------------------------------------------------"
echo "8. Section: Output"
echo "------------------------------------------------------------------"

dnl ---
dnl Create output files
dnl ---

AC_OUTPUT([
Makefile
ecasound.spec
ecasoundrc
libecasound/Makefile
libecasound/libecasound-config
libecasound/plugins/Makefile
libecasoundc/Makefile
libecasoundc/libecasoundc-config
pyecasound/Makefile
ecasound/Makefile
ecatools/Makefile
kvutils/Makefile
Documentation/Makefile
Documentation/users_guide/Makefile
Documentation/programmers_guide/Makefile
examples/Makefile
])

dnl ---
dnl Print summary of the configured options
dnl ---

echo "-----------------------------------------------------------------"
echo "Following packages are now configured:"
echo "ecasound: 		yes (ecasound,libecasound,libecasoundc)"
echo "ecatools: 		yes"
if test x$compile_pyecasound = xyes ; then
	echo "pyecasound: 		yes"
else
	echo "pyecasound: 		no"
fi
echo "libkvutils: 		yes"
echo "-----------------------------------------------------------------"
echo "Compiler options:"
echo "CFLAGS                  $CFLAGS"
echo "CXXFLAGS                $CXXFLAGS"
echo "-----------------------------------------------------------------"
echo "Following features were selected:"
if test x$include_debug = xyes ; then
	echo "Debugging info:		yes"
else
	echo "Debugging info:		no"	
fi
if test x$termcap_library = xtermcap ; then
	echo "Termcap:		termcap"
fi
if test x$termcap_library = xncurses; then
	echo "Termcap:		ncurses"
fi
if test x$termcap_library = xnone; then
	echo "Termcap:		none"
fi

if test x$af_support = xyes ; then
	echo "Libaudiofile:		yes"
else
	echo "Libaudiofile:		no"
fi

if test x$alsa_support = xyes ; then
	echo "ALSA support		yes"
else
	echo "ALSA support		no"
fi

if test x$oss_support = xyes ; then
	echo "OSS support		yes"
else
	echo "OSS support		no"
fi
if test x$arts_support = xyes ; then
	echo "aRts support		yes"
else
	echo "aRts support		no"
fi
if test x$jack_support = xyes ; then
	echo "JACK support		yes"
else
	echo "JACK support		no"
fi
if test x$enable_sysreadline = xyes ; then
	echo "Use system readline	yes"
else
	echo "Use system readline	no"
fi

echo "-----------------------------------------------------------------"
echo "Following directories are used:"
echo "Directory prefix:    "$ECA_S_PREFIX
if test x$compile_pyecasound = xyes ; then
	echo "Python include dir:	"$ECA_S_PYTHON_INCLUDES
	echo "Python module dir:	"$ECA_S_PYTHON_MODULES
fi
if test x$jack_support = xyes ; then
	echo "JACK headers:		"$ECA_S_JACK_INCLUDES
	echo "JACK libraries:		"$ECA_S_JACK_LIBS
fi
if test x$enable_sysreadline = xyes ; then
  	echo "readline includes:	"$ECA_S_READLINE_INCLUDES
fi  

echo "-------------------------------------------------------------------"
echo "Type 'make' to compile the package and 'make install' to install."
echo "Remember to use GNU Make, often installed as 'gmake'."
echo "-------------------------------------------------------------------"

dnl ------------------------------------------------------------------
dnl X. Section: End
dnl ------------------------------------------------------------------
